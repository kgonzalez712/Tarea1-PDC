(define (createList size lista)
  (cond ((= 0 size)(list lista))
              (else (createList (- size 1) (cons 0 lista)))))

(define (createMat size)
  (cond ((= 0 size)'())
        (else (createMatAux '() size size))))


(define (createMatAux matrix size cant)
  (cond ((= 0 size)matrix)
        (else (createMatAux (append (createList cant '()) matrix) (- size 1) cant))))
(define (setX List pos value)
  (setXAux List pos value '() 0)
  )
(define (setXAux List pos value newL index)
  (cond ((empty? List) newL)
        ((= pos index) (setXAux (cdr List) pos value (append newL (list value)) (+ index 1)))
        (else (setXAux (cdr List) pos value (append newL (list (car List))) (+ index 1)))
        )
  )

;Define el valor dado en la posicion x y de la matriz
(define (setVal matrix x y value)
  (setValAux matrix x y value '() 0)
  )
(define (setValAux matrix x y value newM index)
    (cond ((empty? matrix) newM)
        ((= index x) (setValAux (cdr matrix) x y value (append newM (list (setX (car matrix) y value))) (+ index 1)))
        (else (setValAux (cdr matrix) x y value (append newM  (list (car matrix))) (+ index 1)))
        )
  )

(define (getindex list i)
  (getindexAux list i list i)
  )
(define (getindexAux list i a ir)
  (cond ((= i 0) (car a))
        (else (getindexAux list (- i 1) (cdr a) ir)))
  )
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define (PDC-sol size x y m)
  (PDC-sol1 size x y (createMat size) 1)
)

(define (PDC-sol1 size x y mat m)
  (cond ((or(or(or (< 0 x ) (>= x size )) (>= x size )) (not(equal? (getindex (getindex mat x) y) 0)) )  #f)
  (else (PDC-Aux size (setVal mat x y m) x y m)))
)

(define (PDC-Aux size  mat x y m)
  (cond ((equal? m (* size size)) #t)
        (else (validate size x y mat m))
        )
)

(define (validate size x y mat m)
  (cond ((or(or(or(or(or(or((PDC-sol1 size (+ x 2) (+ y 1) mat (+ m 1)) (PDC-sol1 size (+ x 2) (- y 1) mat (+ m 1)) )
              (PDC-sol1 size (- x 2) (+ y 1) mat (+ m 1)))  (PDC-sol1 size (- x 2) (- y 1) mat (+ m 1))  ) (PDC-sol1 size (+ x 1) (+ y 1) mat (+ m 1)))
        ((PDC-sol1 size (+ x 1) (- y 1) mat (+ m 1))) ) (PDC-sol1 size (- x 1) (+ y 1) mat (+ m 1))) (PDC-sol1 size (- x 1) (- y 1) mat (+ m 1))) #t)
        (else #f)
        )
)

(PDC-sol 5 0 0 1)
